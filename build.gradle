import com.bmuschko.gradle.docker.tasks.image.*

buildscript {
    ext {
        springBootVersion = '1.5.7.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

allprojects {
    group = 'im.wjz'
    version = '1.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'java'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.bmuschko.docker-remote-api'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    ext {
        // versioning
        springBootVersion = '1.5.7.RELEASE'
        springBootAdminVersion = '1.5.0'

        springCloudVersion = 'Dalston.SR3'
        springCloudOauthVersion = '1.2.1.RELEASE'
        springCloudConsulVersion = '1.2.1.RELEASE'
        springCloudSleuthVersion = '1.2.1.RELEASE'
        springCloudStreamVersion = '1.2.1.RELEASE'
        springCloudConfigVersion = '1.3.1.RELEASE'
        springCloudBusAmqpVersion = '1.3.1.RELEASE'
        springCloudHystrixVersion = '1.3.1.RELEASE'
        springCloudTurbineVersion = '1.3.1.RELEASE'
        springCloudZuulVersion = '1.3.1.RELEASE'
        springCloudFeighVersion = '1.3.1.RELEASE'
        springCloudRibbonVersion = '1.3.1.RELEASE'

        springfoxVersion = '2.6.1'
        springRetryVersion = '1.2.1.RELEASE'

        jolokiaVersion = '1.3.5'

        junit4Version = '4.12'
        junitVintageVersion = '4.12.0'
        junitPlatformVersion = '1.0.0'
        junitJupiterVersion = '5.0.0'
        log4jVersion = '2.9.0'

        // others
        dockerPath = "${buildDir}/docker/"
    }

    junitPlatform {
        // platformVersion '1.0.0'
        filters {
            engines {
                // include 'junit-jupiter', 'junit-vintage'
                // exclude 'custom-engine'
            }
            tags {
                // include 'fast'
                exclude 'slow'
            }
            // includeClassNamePattern '.*Test'
        }
        // enableStandardTestTask true
        // reportsDir file('build/test-results/junit-platform') // this is the default
        logManager 'org.apache.logging.log4j.jul.LogManager'
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion

        // test whether the jar can run
        testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion) {
            exclude(module: 'asm')
        }

        // JUnit Jupiter API and TestEngine implementation
        testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

        // If you also want to support JUnit 3 and JUnit 4 tests
        testCompile("junit:junit:${junit4Version}")
        testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")

        testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
        testRuntime("org.apache.logging.log4j:log4j-api:${log4jVersion}")
        testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
    }

    //---------------docker-------------------

    // 拷贝jar包到docker编译目录
    task copyJarToDocker(type: Copy) {
        // dependsOn   'build'
        from "${buildDir}/libs/${archivesBaseName}-${version}.jar"
        into "${dockerPath}/"
    }

    // 创建Dockerfile
    task createDockerfile(type: Dockerfile) {
        dependsOn 'copyJarToDocker'
        destFile = project.file("${dockerPath}/Dockerfile")

        from 'openjdk:8-jdk-alpine'
        maintainer 'Jerry Zhu "jerry@xqopen.com"'
        String jarName = "${archivesBaseName}-${version}.jar"
        addFile("${jarName}", "/${jarName}")
        environmentVariable("LANG", "C.UTF-8")
        defaultCommand "java", "-jar", "/${jarName}"
    }

    // 编译docker镜像
    task buildImage(type: DockerBuildImage) {
        dependsOn 'createDockerfile'
        inputDir = createDockerfile.destFile.parentFile
        tag = "${rootProject.name}/${archivesBaseName}:latest"
        String group = project.archivesBaseName.split('-')[0]
        labels = [
                "com.example.group": group,
                "com.example.name" : archivesBaseName,
        ]
    }

}
